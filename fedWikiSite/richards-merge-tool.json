{
  "title": "Richards Merge Tool",
  "story": [
    {
      "type": "html",
      "text": "There have to be [[Merge Tool]]s, right? Unfortunately, I've never heard of any standalones so I'll design one from scratch.",
      "id": "614538200fdc52afe80ccc7c0f3957df"
    },
    {
      "type": "html",
      "text": "\nThe merge tool has two areas, a left one and a right one like [[Midnight Commander]]. Both areas are of equal size and there's no way to change that.",
      "id": "4d105dc5a573bcf1ce8ffaa2b3ce322d"
    },
    {
      "type": "html",
      "text": "\nEach area takes one file. When an area hasn't had any files dropped down on it, it's taken to be empty.",
      "id": "58aa28e88c85eac155a8d11887d2582e"
    },
    {
      "type": "html",
      "text": "\nThe differator runs continually and there's no need for an explicit comparison command. Every time a file in either area is changed or loaded, a new comparison is run. The differator runs in <i>case sensitive text-mode</i> and there are no other options.",
      "id": "d4060851d8c55cf50b7e85297d313dd5"
    },
    {
      "type": "html",
      "text": "\nAt the top of the merge tool, above the two areas, there are <i>numeric</i> results for the total number of <i>non-whitespace</i>:",
      "id": "c36ff15d2ea4f29c01eaef97cb5cce7d"
    },
    {
      "type": "html",
      "text": " lines added in the left area",
      "id": "f1d3729d318786ff4afde851fd965975"
    },
    {
      "type": "html",
      "text": " lines changed in the left area / in the right area",
      "id": "05d59de853bd6c6c09fea8e719e78a34"
    },
    {
      "type": "html",
      "text": " lines deleted in the left area",
      "id": "661443d339b71e6c531be7bc1ef94072"
    },
    {
      "type": "html",
      "text": "\nThe first is above the left area, the second is above the middle, the third is above the right area. Below each of the above numeric results, there is a row of numeric results for whitespace.",
      "id": "ec8d6c1a2c0f414c4559940d3a7de630"
    },
    {
      "type": "html",
      "text": "\nThe merge tool uses colour highlighting; one colour for additions, another for deletions, and the combination of both colours for changes. The highlighting is done <i>in place</i> and missing text is where it would be if it wasn't missing, just highlighted. There's no need for any useless and cryptic 943c23 references, whatever they might mean.",
      "id": "a6b7db0f8dcb0347bcfad3709e5d3cb4"
    },
    {
      "type": "html",
      "text": "\nThe two areas share <i>one</i> scroll bar because scrolling is simultaneous in both areas. Both areas are always synchronized together, there is no way to desynchronize them. When an area contains a shorter change than the other area and scrolling has come to the end of that change, the shorter area will pause scrolling to wait for the longer one to catch up.",
      "id": "30c860b690911c6e4d239b18266d72a5"
    },
    {
      "type": "html",
      "text": "\nThe unique scroll bar isn't in the middle but on the right. There is nothing in the middle to block the left area from the right. At any time, the user can drag and drop a change, deletion or addition <i>in toto</i> from one area to the other area. They do not need to select any text and they don't need to be accurate in their target. The user picks up a <i>change</i> which <i>happens</i> to present itself as text (and not a button or something equally stupid) and just has to drop it to the other area to apply it.",
      "id": "211b337c7e20d9fefbd57e95f0170d91"
    },
    {
      "type": "html",
      "text": "\nWhen a user has moved a change from one area to the next, the file is saved and the differator is run over the new contents. IOW, the change disappears from view entirely.",
      "id": "e1ec2809937dc13d42f46340dc74d545"
    },
    {
      "type": "html",
      "text": "\nIf the target area's file is read-only then the cursor doesn't change to indicate that something can be dropped onto it. There are no stupid and annoying beeps, there are no error dialogs, there are no error messages of any kind. The user can see for themselves that nothing happened. Conversely, upon success there are no nifty keen noises since the user can see for themselves that something happened. The merge tool isn't annoying or flashy.",
      "id": "e32c33eac2cd2dab416020e3af2475c1"
    },
    {
      "type": "html",
      "text": "\nThe merge tool operates on MERGE files. To create a new merge, you right click on some empty space, select New and Merge. The merge file contains all \"temporary\" data of each merge run including but not limited to the names and locations of the files to be merged and the merges that have been performed on both files.",
      "id": "106b1a27788267b09545bb69271963a7"
    },
    {
      "type": "html",
      "text": "\nThere are no save buttons, no save as buttons, no open file buttons and no menu bar. These features don't exist. The merge tool saves all files after each operation and before closing.",
      "id": "449bc661e00fa6273185099a4e4bd23c"
    },
    {
      "type": "html",
      "text": "\nThe merge file is logged so that a computer crash in the middle of a merge will not leave the files in an inconsistent state. The fact that such a crash will likely destroy any file being written is ignored; a versioned operating system is assumed.",
      "id": "b4d5b32a693d4370c5286b86a165d63d"
    },
    {
      "type": "html",
      "text": "\nThere is an infinite undo [[Cactus Stack]]. The top-most contents of this stack are constantly visible at the bottom of the merge tool. By contents we mean \"addition to <name of file>\" or \"deletion to <name of other file>\" assuming the names are different, LHS and RHS if they are not. The cactus stack is part of the \"temporary\" information of a merge run and so stored in the merge file.",
      "id": "1c08d75a6ddfc56b2c93c27ee1a0f491"
    },
    {
      "type": "html",
      "text": "\nA user can right click on a merge and has the option of undoing it or everything after it. Any merges that are undone are removed from the main branch (whatever branch of the catcus stack the user is working in) and moved to a new branch. Consecutive merge undoes are moved to the same new branch. A user can also right click on a merge off of the main branch to merge it with the main branch. A user may finally switch to a different branch of the cactus stack.",
      "id": "9d36791d978bce4ccd1b00c04249043e"
    },
    {
      "type": "html",
      "text": "\nWhen a user navigates the cactus stack, the merge tool scrolls (at human normal speed, not freakishly fast) to the location of the merge. When the user is done manipulating merges, they can go back to the top of the cactus stack, where their last free location has been kept in a dummy merge, described perhaps as \"current merge\".",
      "id": "73cd7ecc930810e0ea8c46fffcb0d4ce"
    },
    {
      "type": "html",
      "text": "\nI'm pretty happy with this design since it validates and entrenches my position on [[Automatic Vs Manual Placement]] against the manual placement of objects. You don't need to place objects side by side even to compare them, the comparison is its own object. Not that I was worried but I did wonder. Well, not really. Oh, hell, it's just a good design!",
      "id": "840006d94ab8b1b2fcb92413a975e0e2"
    },
    {
      "type": "html",
      "text": "-- [[Richard Kulisz]]",
      "id": "d66d0dbe2f6cfeb50c77f4072fb7e554"
    },
    {
      "type": "html",
      "text": "\nSee also [[Merge Tool]].",
      "id": "770433c036ecfc26e38e50cd2e16b2d8"
    },
    {
      "type": "html",
      "text": "\nWhy would anyone ever use this tool? How often do documents diverge in such a way that the semantics are similar enough to make this tool useful? It seems to me like the exception not the rule. The only places I could think of would be poetry and derivatives. -- [[Dave Fayram]]",
      "id": "21228723903a4ab205672bfff0d8acc1"
    },
    {
      "type": "html",
      "text": "\nWhat Richard describes above is only partly a merge tool, it's more like an interesting UI for what sounds like a vague sketch of a pretty pedestrian [[Version Control System]]. Version control is used most often for program source code, but it's also used pretty commonly for text documents. The 'diff' algorithms involved don't care about semantics, they just look for similar chunks of text -- usually chunks of lines, more specifically. How good a job they do varies with the algorithm, content, and the eye of the beholder.",
      "id": "ee0b36ccc2635e69401d06f1f7d54bc6"
    },
    {
      "type": "html",
      "text": "\nRichard's design is pretty bare-bones, IMO, and would be inadequate for a lot of real-world scenarios. For instance, the requirement to always keep the two views synchronized is quite unrealistic when the files differ due to blocks being moved over long distances. (What does 'synchronized' mean in such instances? Synchronized according to which text -- the text moved, or the surrounding text not moved?) It would be very annoyingly restrictive in such cases. His disparaging comment about \"cryptic 943c23 references\" refers to typical output from traditional UNIX diff programs, which predate graphical interfaces by decades. The other tools which were mentioned (moved to [[Merge Tools]]) are more modern and more interactive, and do in fact provide interfaces that are somewhat closer to what Richard describes, to varying degrees.",
      "id": "a41657c4e414041f548f27fa7e5313af"
    },
    {
      "type": "html",
      "text": "-- [[Dan Muller]]",
      "id": "a10f4447e6f89ed41142f9873958a338"
    },
    {
      "type": "html",
      "text": "\nI'm fairly certain I've used a merge tool (probably [[Eclipse Ide]], but could be [[Win Diff]] or [[Dir Diff]]) that had only a single scroll bar and automatically kept the views synchronized.  It was a huge usability improvement over tools with separate scrollbars.  It dealt with block movement by only scrolling the pane with inserted text until the two panes were synchronized again.  In every case I encountered, this was just what I wanted.",
      "id": "8d34444f9f38f69ce046185ed46904d3"
    },
    {
      "type": "html",
      "text": "\nOh, and it had just about every other feature Richard mentioned too, except for separate MERGE files and unlimited undo (it was a frontend for CVS, though, so you've basically got unlimited undo anyway).  I think that having separate MERGE files is a mistake, anyway: I'm often more interested in viewing differences than fixing them.  -- [[Jonathan Tang]]",
      "id": "5aeb279d8ec406c20d1a294b05834891"
    },
    {
      "type": "html",
      "text": "\nit sounds quite like linCVS which certainly has a nice diff output (cant remember if merge but probably) with colour coding and a single central scroll bar which is also colour coded so you can see where all edits in document are in one go (sorry that description isnt very good here is an url [http://www.lincvs.org/ www.lincvs.org])",
      "id": "58a185c6bbb15d018d747cb56e43dc0c"
    },
    {
      "type": "html",
      "text": " Viewing changes in the history of a single document is a completely different application. You no longer need multiple panes at all since you're no longer moving anything between them. It's better to have a single pane that shows multiple levels of changes somehow. Colour is only one option. Another option is to have changed paragraphs in the later version shown in a pane to the right but with recurring paragraphs suppressed. But since you've got an ordered history, you need to ensure that before and after are presented to the user. And you've also got to present the history of the file as a continuum which the user can sample from. These make for very different requirements.",
      "id": "b8fe72c733306445d4fb613e4fcdfba3"
    },
    {
      "type": "html",
      "text": "\nSynchronizing usually is what you want; I should have emphasized that requiring to <i>always</i> be synchronized is potentially painful. I think you might be describing [[Win Diff]], but it's been a while since I used it. More recently, I use ediff in XEmacs. There, navigation is not forcibly synchronized, but you usually navigate by moving from one block to the next, and the two panes <i>are</i> kept synchronized when you move this way. It's easy to copy each individual change block to or from each version. (Of course, there are lots of things about ediff/Emacs that would make it prototypically 'crap' to RK.) The merge sounds like the information that a VCS usually stores internally to describe changes between versions; hence my comment about version control. But I could be misinterpreting RK's intent. -- [[Dan Muller]]",
      "id": "080736a9fb03c390058ffd9a59612dbb"
    },
    {
      "type": "html",
      "text": " Merge files are a design artifact to make everything nicely direct-manipulated and to provide reversible operations.",
      "id": "1dff0c8fe81eafee24f4edd88c218fef"
    },
    {
      "type": "html",
      "text": "\nApple's Dev tools come with a truly outstanding visual diff/merge tool that solves the long-block-displacement problem by using a bezier curve outline around differing regions, linking them across the boundary between windows. Not only is this approach beautiful (they get a nice smooth outline of a distinct color) but it makes it clear which differences associate where. The scroll synchronization problem goes away in this scenario. In fact, I'd say it meets almost every requirement that this tool has, and then some.  -- [[Dave Fayram]]",
      "id": "1962b2df73f11c2daa8eb460f4863515"
    },
    {
      "type": "html",
      "text": " Wish I could see it.",
      "id": "9eccb40b8678ce5c0d5b6b939be8a594"
    },
    {
      "type": "html",
      "text": " Apple computers come with the dev kit standard (and free as in gratis). Buy a mac mini or something and try it. Better yet, get a swell G5 iMac and give it a whirl. Those PPC970fx processors are ungodly fast when you use the builtin vector engine.",
      "id": "bc19bc19805eedd3dbdecb13bd7ccdd9"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8dbaab989a67b175c643c997a422a620"
    },
    {
      "type": "html",
      "text": "[[May Zero Five]]",
      "id": "9d14b41579e2d7631fda153160bc1c20"
    },
    {
      "type": "html",
      "text": "\n[[Category Interaction Design]], [[Richards Suite Of Tools]]",
      "id": "644b94be1d39fab2d7785d9ce09858c1"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?RichardsMergeTool c2.com]",
      "id": "eed93fce08042c99983fc60f39f8e3f4"
    }
  ],
  "journal": [
    {
      "date": 1143569190000,
      "id": "acfdceb87a3836762e8f5e35e0499d79",
      "type": "create",
      "item": {
        "title": "Richards Merge Tool",
        "story": [
          {
            "type": "html",
            "text": "There have to be [[Merge Tool]]s, right? Unfortunately, I've never heard of any standalones so I'll design one from scratch.",
            "id": "614538200fdc52afe80ccc7c0f3957df"
          },
          {
            "type": "html",
            "text": "\nThe merge tool has two areas, a left one and a right one like [[Midnight Commander]]. Both areas are of equal size and there's no way to change that.",
            "id": "4d105dc5a573bcf1ce8ffaa2b3ce322d"
          },
          {
            "type": "html",
            "text": "\nEach area takes one file. When an area hasn't had any files dropped down on it, it's taken to be empty.",
            "id": "58aa28e88c85eac155a8d11887d2582e"
          },
          {
            "type": "html",
            "text": "\nThe differator runs continually and there's no need for an explicit comparison command. Every time a file in either area is changed or loaded, a new comparison is run. The differator runs in <i>case sensitive text-mode</i> and there are no other options.",
            "id": "d4060851d8c55cf50b7e85297d313dd5"
          },
          {
            "type": "html",
            "text": "\nAt the top of the merge tool, above the two areas, there are <i>numeric</i> results for the total number of <i>non-whitespace</i>:",
            "id": "c36ff15d2ea4f29c01eaef97cb5cce7d"
          },
          {
            "type": "html",
            "text": " lines added in the left area",
            "id": "f1d3729d318786ff4afde851fd965975"
          },
          {
            "type": "html",
            "text": " lines changed in the left area / in the right area",
            "id": "05d59de853bd6c6c09fea8e719e78a34"
          },
          {
            "type": "html",
            "text": " lines deleted in the left area",
            "id": "661443d339b71e6c531be7bc1ef94072"
          },
          {
            "type": "html",
            "text": "\nThe first is above the left area, the second is above the middle, the third is above the right area. Below each of the above numeric results, there is a row of numeric results for whitespace.",
            "id": "ec8d6c1a2c0f414c4559940d3a7de630"
          },
          {
            "type": "html",
            "text": "\nThe merge tool uses colour highlighting; one colour for additions, another for deletions, and the combination of both colours for changes. The highlighting is done <i>in place</i> and missing text is where it would be if it wasn't missing, just highlighted. There's no need for any useless and cryptic 943c23 references, whatever they might mean.",
            "id": "a6b7db0f8dcb0347bcfad3709e5d3cb4"
          },
          {
            "type": "html",
            "text": "\nThe two areas share <i>one</i> scroll bar because scrolling is simultaneous in both areas. Both areas are always synchronized together, there is no way to desynchronize them. When an area contains a shorter change than the other area and scrolling has come to the end of that change, the shorter area will pause scrolling to wait for the longer one to catch up.",
            "id": "30c860b690911c6e4d239b18266d72a5"
          },
          {
            "type": "html",
            "text": "\nThe unique scroll bar isn't in the middle but on the right. There is nothing in the middle to block the left area from the right. At any time, the user can drag and drop a change, deletion or addition <i>in toto</i> from one area to the other area. They do not need to select any text and they don't need to be accurate in their target. The user picks up a <i>change</i> which <i>happens</i> to present itself as text (and not a button or something equally stupid) and just has to drop it to the other area to apply it.",
            "id": "211b337c7e20d9fefbd57e95f0170d91"
          },
          {
            "type": "html",
            "text": "\nWhen a user has moved a change from one area to the next, the file is saved and the differator is run over the new contents. IOW, the change disappears from view entirely.",
            "id": "e1ec2809937dc13d42f46340dc74d545"
          },
          {
            "type": "html",
            "text": "\nIf the target area's file is read-only then the cursor doesn't change to indicate that something can be dropped onto it. There are no stupid and annoying beeps, there are no error dialogs, there are no error messages of any kind. The user can see for themselves that nothing happened. Conversely, upon success there are no nifty keen noises since the user can see for themselves that something happened. The merge tool isn't annoying or flashy.",
            "id": "e32c33eac2cd2dab416020e3af2475c1"
          },
          {
            "type": "html",
            "text": "\nThe merge tool operates on MERGE files. To create a new merge, you right click on some empty space, select New and Merge. The merge file contains all \"temporary\" data of each merge run including but not limited to the names and locations of the files to be merged and the merges that have been performed on both files.",
            "id": "106b1a27788267b09545bb69271963a7"
          },
          {
            "type": "html",
            "text": "\nThere are no save buttons, no save as buttons, no open file buttons and no menu bar. These features don't exist. The merge tool saves all files after each operation and before closing.",
            "id": "449bc661e00fa6273185099a4e4bd23c"
          },
          {
            "type": "html",
            "text": "\nThe merge file is logged so that a computer crash in the middle of a merge will not leave the files in an inconsistent state. The fact that such a crash will likely destroy any file being written is ignored; a versioned operating system is assumed.",
            "id": "b4d5b32a693d4370c5286b86a165d63d"
          },
          {
            "type": "html",
            "text": "\nThere is an infinite undo [[Cactus Stack]]. The top-most contents of this stack are constantly visible at the bottom of the merge tool. By contents we mean \"addition to <name of file>\" or \"deletion to <name of other file>\" assuming the names are different, LHS and RHS if they are not. The cactus stack is part of the \"temporary\" information of a merge run and so stored in the merge file.",
            "id": "1c08d75a6ddfc56b2c93c27ee1a0f491"
          },
          {
            "type": "html",
            "text": "\nA user can right click on a merge and has the option of undoing it or everything after it. Any merges that are undone are removed from the main branch (whatever branch of the catcus stack the user is working in) and moved to a new branch. Consecutive merge undoes are moved to the same new branch. A user can also right click on a merge off of the main branch to merge it with the main branch. A user may finally switch to a different branch of the cactus stack.",
            "id": "9d36791d978bce4ccd1b00c04249043e"
          },
          {
            "type": "html",
            "text": "\nWhen a user navigates the cactus stack, the merge tool scrolls (at human normal speed, not freakishly fast) to the location of the merge. When the user is done manipulating merges, they can go back to the top of the cactus stack, where their last free location has been kept in a dummy merge, described perhaps as \"current merge\".",
            "id": "73cd7ecc930810e0ea8c46fffcb0d4ce"
          },
          {
            "type": "html",
            "text": "\nI'm pretty happy with this design since it validates and entrenches my position on [[Automatic Vs Manual Placement]] against the manual placement of objects. You don't need to place objects side by side even to compare them, the comparison is its own object. Not that I was worried but I did wonder. Well, not really. Oh, hell, it's just a good design!",
            "id": "840006d94ab8b1b2fcb92413a975e0e2"
          },
          {
            "type": "html",
            "text": "-- [[Richard Kulisz]]",
            "id": "d66d0dbe2f6cfeb50c77f4072fb7e554"
          },
          {
            "type": "html",
            "text": "\nSee also [[Merge Tool]].",
            "id": "770433c036ecfc26e38e50cd2e16b2d8"
          },
          {
            "type": "html",
            "text": "\nWhy would anyone ever use this tool? How often do documents diverge in such a way that the semantics are similar enough to make this tool useful? It seems to me like the exception not the rule. The only places I could think of would be poetry and derivatives. -- [[Dave Fayram]]",
            "id": "21228723903a4ab205672bfff0d8acc1"
          },
          {
            "type": "html",
            "text": "\nWhat Richard describes above is only partly a merge tool, it's more like an interesting UI for what sounds like a vague sketch of a pretty pedestrian [[Version Control System]]. Version control is used most often for program source code, but it's also used pretty commonly for text documents. The 'diff' algorithms involved don't care about semantics, they just look for similar chunks of text -- usually chunks of lines, more specifically. How good a job they do varies with the algorithm, content, and the eye of the beholder.",
            "id": "ee0b36ccc2635e69401d06f1f7d54bc6"
          },
          {
            "type": "html",
            "text": "\nRichard's design is pretty bare-bones, IMO, and would be inadequate for a lot of real-world scenarios. For instance, the requirement to always keep the two views synchronized is quite unrealistic when the files differ due to blocks being moved over long distances. (What does 'synchronized' mean in such instances? Synchronized according to which text -- the text moved, or the surrounding text not moved?) It would be very annoyingly restrictive in such cases. His disparaging comment about \"cryptic 943c23 references\" refers to typical output from traditional UNIX diff programs, which predate graphical interfaces by decades. The other tools which were mentioned (moved to [[Merge Tools]]) are more modern and more interactive, and do in fact provide interfaces that are somewhat closer to what Richard describes, to varying degrees.",
            "id": "a41657c4e414041f548f27fa7e5313af"
          },
          {
            "type": "html",
            "text": "-- [[Dan Muller]]",
            "id": "a10f4447e6f89ed41142f9873958a338"
          },
          {
            "type": "html",
            "text": "\nI'm fairly certain I've used a merge tool (probably [[Eclipse Ide]], but could be [[Win Diff]] or [[Dir Diff]]) that had only a single scroll bar and automatically kept the views synchronized.  It was a huge usability improvement over tools with separate scrollbars.  It dealt with block movement by only scrolling the pane with inserted text until the two panes were synchronized again.  In every case I encountered, this was just what I wanted.",
            "id": "8d34444f9f38f69ce046185ed46904d3"
          },
          {
            "type": "html",
            "text": "\nOh, and it had just about every other feature Richard mentioned too, except for separate MERGE files and unlimited undo (it was a frontend for CVS, though, so you've basically got unlimited undo anyway).  I think that having separate MERGE files is a mistake, anyway: I'm often more interested in viewing differences than fixing them.  -- [[Jonathan Tang]]",
            "id": "5aeb279d8ec406c20d1a294b05834891"
          },
          {
            "type": "html",
            "text": "\nit sounds quite like linCVS which certainly has a nice diff output (cant remember if merge but probably) with colour coding and a single central scroll bar which is also colour coded so you can see where all edits in document are in one go (sorry that description isnt very good here is an url [http://www.lincvs.org/ www.lincvs.org])",
            "id": "58a185c6bbb15d018d747cb56e43dc0c"
          },
          {
            "type": "html",
            "text": " Viewing changes in the history of a single document is a completely different application. You no longer need multiple panes at all since you're no longer moving anything between them. It's better to have a single pane that shows multiple levels of changes somehow. Colour is only one option. Another option is to have changed paragraphs in the later version shown in a pane to the right but with recurring paragraphs suppressed. But since you've got an ordered history, you need to ensure that before and after are presented to the user. And you've also got to present the history of the file as a continuum which the user can sample from. These make for very different requirements.",
            "id": "b8fe72c733306445d4fb613e4fcdfba3"
          },
          {
            "type": "html",
            "text": "\nSynchronizing usually is what you want; I should have emphasized that requiring to <i>always</i> be synchronized is potentially painful. I think you might be describing [[Win Diff]], but it's been a while since I used it. More recently, I use ediff in XEmacs. There, navigation is not forcibly synchronized, but you usually navigate by moving from one block to the next, and the two panes <i>are</i> kept synchronized when you move this way. It's easy to copy each individual change block to or from each version. (Of course, there are lots of things about ediff/Emacs that would make it prototypically 'crap' to RK.) The merge sounds like the information that a VCS usually stores internally to describe changes between versions; hence my comment about version control. But I could be misinterpreting RK's intent. -- [[Dan Muller]]",
            "id": "080736a9fb03c390058ffd9a59612dbb"
          },
          {
            "type": "html",
            "text": " Merge files are a design artifact to make everything nicely direct-manipulated and to provide reversible operations.",
            "id": "1dff0c8fe81eafee24f4edd88c218fef"
          },
          {
            "type": "html",
            "text": "\nApple's Dev tools come with a truly outstanding visual diff/merge tool that solves the long-block-displacement problem by using a bezier curve outline around differing regions, linking them across the boundary between windows. Not only is this approach beautiful (they get a nice smooth outline of a distinct color) but it makes it clear which differences associate where. The scroll synchronization problem goes away in this scenario. In fact, I'd say it meets almost every requirement that this tool has, and then some.  -- [[Dave Fayram]]",
            "id": "1962b2df73f11c2daa8eb460f4863515"
          },
          {
            "type": "html",
            "text": " Wish I could see it.",
            "id": "9eccb40b8678ce5c0d5b6b939be8a594"
          },
          {
            "type": "html",
            "text": " Apple computers come with the dev kit standard (and free as in gratis). Buy a mac mini or something and try it. Better yet, get a swell G5 iMac and give it a whirl. Those PPC970fx processors are ungodly fast when you use the builtin vector engine.",
            "id": "bc19bc19805eedd3dbdecb13bd7ccdd9"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8dbaab989a67b175c643c997a422a620"
          },
          {
            "type": "html",
            "text": "[[May Zero Five]]",
            "id": "9d14b41579e2d7631fda153160bc1c20"
          },
          {
            "type": "html",
            "text": "\n[[Category Interaction Design]], [[Richards Suite Of Tools]]",
            "id": "644b94be1d39fab2d7785d9ce09858c1"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?RichardsMergeTool c2.com]",
            "id": "eed93fce08042c99983fc60f39f8e3f4"
          }
        ]
      }
    }
  ]
}